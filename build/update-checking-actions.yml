actions:

  # Version and validation actions
  - name: version-check
    run: build/version check

  - name: version-greatest
    run: build/version check-greatest

  # Git actions
  - name: git-untracked
    uses: git@untracked

  - name: git-uncommitted
    uses: git@uncommitted

  - name: git-modified
    uses: git@modified

  - name: pre-check
    run: buildfab run pre-check

  # Platform detection
  - name: platform-view
    run: |
      echo "platform: ${{platform}}"
      echo "arch: '${{arch}}'"
      echo "os: '${{os}}'"
      echo "os_version: '${{os_version}}'"
      echo "cpu: ${{cpu}}"

  # Tool check actions
  - name: check-conan
    run: |
      if ! which conan >/dev/null 2>&1; then
        echo "Conan is not installed. Install with: pip install conan"
        exit 1
      fi
      conan --version

  - name: check-cmake
    run: |
      if ! which cmake >/dev/null 2>&1; then
        echo "CMake not found, will use Conan's CMake"
      else
        cmake --version
      fi

  - name: check-clang-format
    run: |
      if ! which clang-format >/dev/null 2>&1; then
        echo "clang-format not found"
        exit 1
      else
        clang-format --version
      fi

  - name: check-cppcheck
    run: |
      if ! which cppcheck >/dev/null 2>&1; then
        echo "cppcheck not found"
        exit 1
      else
        cppcheck --version
      fi

  - name: check-valgrind
    run: |
      if ! which valgrind >/dev/null 2>&1; then
        echo "valgrind not found"
        exit 1
      else
        valgrind --version
      fi

  - name: check-version-utility
    run: |
      if [ ! -f "build/version" ]; then
        echo "Version utility not found in build/ directory"
        echo "To install: buildfab run pre-install"
        exit 1
      fi
      build/version -V

  - name: check-pre-push-utility
    run: |
      if [ ! -f "build/pre-push" ]; then
        echo "Pre-push utility not found in build/ directory"
        echo "To install: buildfab run pre-install"
        exit 1
      fi
      build/pre-push -V

  # Tool installation actions
  - name: install-conan
    run: |
      if ! which conan >/dev/null 2>&1; then
       echo "Installing Conan package manager..."
       if ! which pip >/dev/null 2>&1; then
         echo "pip is not installed. Please install Python and pip first"
         exit 1
       fi
       # Try to install Conan with different methods
       if pip install conan --break-system-packages 2>/dev/null; then
         echo "Conan installed successfully with --break-system-packages"
       elif pip install --user conan 2>/dev/null; then
         echo "Conan installed successfully in user directory"
         echo "You may need to add ~/.local/bin to your PATH"
       elif python3 -m pip install conan --break-system-packages 2>/dev/null; then
         echo "Conan installed successfully with python3 -m pip"
       else
         echo "Failed to install Conan via pip. Please install manually:"
         echo "  # Option 1: Use system package manager"
         echo "  sudo apt install conan  # Ubuntu/Debian"
         echo "  # Option 2: Use pipx"
         echo "  pipx install conan"
         echo "  # Option 3: Use virtual environment"
         echo "  python3 -m venv venv && source venv/bin/activate && pip install conan"
         exit 1
       fi
      else
       echo "✅ conan already installed, $(conan --version)"
      fi

      conan --version

  # Update checking actions
  - name: check-buildfab-releases
    run: |
      echo "Checking for buildfab updates..."
      CURRENT_VERSION=$(buildfab -V 2>/dev/null || echo "v0.0.0")
      echo "Current buildfab version: $CURRENT_VERSION"

      # Get latest release from GitHub API
      LATEST_RELEASE=$(curl -s "https://api.github.com/repos/AlexBurnes/buildfab/releases/latest" | grep '"tag_name":' | sed 's/.*"tag_name": "\(.*\)".*/\1/' | sed 's/^v//' || echo "")

      if [ -z "$LATEST_RELEASE" ]; then
        echo "⚠️ Could not fetch latest buildfab release from GitHub"
        echo "To check manually: curl -s https://api.github.com/repos/AlexBurnes/buildfab/releases/latest"
        exit 0
      fi

      echo "Latest buildfab release: $LATEST_RELEASE"

      # Compare versions using sort -V for proper semantic version comparison
      # Simple version comparison using sort -V
      if [ "$CURRENT_VERSION" = "$LATEST_RELEASE" ]; then
        echo "✅ buildfab is up to date: $CURRENT_VERSION"
      else
        # Check if current version is older than latest
        OLDER_VERSION=$(echo "$CURRENT_VERSION\n$LATEST_RELEASE" | sort -V | head -1)
        if [ "$OLDER_VERSION" = "$CURRENT_VERSION" ]; then
          echo "⚠️ New buildfab version available: $LATEST_RELEASE (current: $CURRENT_VERSION)"
          echo "To update buildfab (installed globally):"
          echo "  # Simple installation using wget"
          echo "  wget -O - https://github.com/AlexBurnes/buildfab/releases/latest/download/buildfab-${{platform}}-${{arch}}-install.sh | sudo sh"
          echo "  # Verify installation"
          echo "  buildfab -V"
          exit 0
        else
          echo "✅️ Installed version $CURRENT_RELASE is newest as latest release $LATEST_RELEASE"
          exit 0
        fi
      fi

  - name: check-pre-push-releases
    run: |
      echo "Checking for pre-push utility updates..."
      if [ -f "build/pre-push" ]; then
        PREPUSH_VERSION=$(build/pre-push -V 2>/dev/null || echo "unknown")
        echo "Current pre-push utility: $PREPUSH_VERSION"

        # Get latest pre-push release
        LATEST_RELEASE=$(curl -s "https://api.github.com/repos/AlexBurnes/pre-push/releases/latest" | grep '"tag_name":' | sed 's/.*"tag_name": "\(.*\)".*/\1/' || echo "")

        if [ -n "$LATEST_RELEASE" ]; then
          echo "Latest pre-push release: $LATEST_RELEASE"

          # Strip 'v' prefix from release tag for comparison
          PREPUSH_CLEAN=$(echo "$LATEST_RELEASE" | sed 's/^v//')

          # Compare pre-push utility with latest release
          if [ "$PREPUSH_VERSION" = "$PREPUSH_CLEAN" ]; then
            echo "✅ pre-push utility is up to date: $PREPUSH_VERSION"
          else
            # Check if pre-push version is older than latest
            OLDER_VERSION=$(echo "$PREPUSH_VERSION\n$PREPUSH_CLEAN" | sort -V | head -1)
            if [ "$OLDER_VERSION" = "$PREPUSH_VERSION" ]; then
              echo "⚠️ New pre-push utility available: $LATEST_RELEASE (current: $PREPUSH_VERSION)"
              echo "To update pre-push utility:"
              echo "  buildfab run pre-install"
              exit 1
            else
              echo "⚠️ Version comparison error for pre-push utility"
              exit 1
            fi
          fi
        else
          echo "⚠️ Could not fetch latest pre-push release from GitHub"
        fi
      else
        echo "⚠️ pre-push utility not found in build/ directory"
        echo "To install pre-push utility:"
        echo "  buildfab run pre-install"
        # Don't exit with error when onerror: warn
        exit 0
      fi

  - name: check-version-releases
    run: |
      echo "Checking version utility updates..."
      if [ -f "build/version" ]; then
        VERSION_UTIL_VERSION=$(build/version -V 2>/dev/null || echo "unknown")
        echo "Current version utility: $VERSION_UTIL_VERSION"

        # Get latest version-go release
        VERSION_GO_LATEST=$(curl -s "https://api.github.com/repos/AlexBurnes/version-go/releases/latest" | grep '"tag_name":' | sed 's/.*"tag_name": "\(.*\)".*/\1/' || echo "")

        if [ -n "$VERSION_GO_LATEST" ]; then
          echo "Latest version-go release: $VERSION_GO_LATEST"

          # Compare version utility with latest version-go (strip 'v' prefix for comparison)
          VERSION_GO_CLEAN=$(echo "$VERSION_GO_LATEST" | sed 's/^v//')
          if [ "$VERSION_UTIL_VERSION" = "$VERSION_GO_CLEAN" ]; then
            echo "✅ version utility is up to date: $VERSION_UTIL_VERSION"
          else
            # Check if version utility is older than latest
            OLDER_VERSION=$(echo "$VERSION_UTIL_VERSION\n$VERSION_GO_CLEAN" | sort -V | head -1)
            if [ "$OLDER_VERSION" = "$VERSION_UTIL_VERSION" ]; then
              echo "⚠️ New version utility available: $VERSION_GO_LATEST (current: $VERSION_UTIL_VERSION)"
              echo "To update version utility:"
              echo "  buildfab run pre-install"
              exit 1
            else
              echo "⚠️ Version comparison error for version utility"
              exit 1
            fi
          fi
        else
          echo "⚠️ Could not fetch latest version-go release from GitHub"
        fi
      else
        echo "⚠️ version utility not found in build/ directory"
        echo "To install version utility:"
        echo "  buildfab run pre-install"
        # Don't exit with error when onerror: warn
        exit 0
      fi

  - name: install-version
    run: |
      require_install=1
      if [ -f "build/version" ]; then
        VERSION_UTIL_VERSION=$(build/version -V 2>/dev/null || echo "unknown")
        VERSION_GO_LATEST=$(curl -s "https://api.github.com/repos/AlexBurnes/version-go/releases/latest" | grep '"tag_name":' | sed 's/.*"tag_name": "\(.*\)".*/\1/' | sed 's/^v//' || echo "")
        if [ "${VERSION_UTIL_VERSION}" = "${VERSION_GO_LATEST}" ]; then
          echo "✅ version utility already installed latest version: $(build/version -V)"
          require_install=0
        fi
      fi
      if [ $require_install -eq 1 ]; then
        echo "Installing latest version utility..."
        echo "Installing version utility to build/ directory..."
        echo "Platform: ${{ platform }}, Architecture: ${{ arch }}"
        # Use the correct install script URL format from README with buildfab variables
        wget -O - "https://github.com/AlexBurnes/version-go/releases/latest/download/version-${{ platform }}-${{ arch }}-install.sh" | INSTALL_DIR=./build sh
        # Verify installation
        if [ -f "build/version" ]; then
          echo "✅ version utility installed successfully: $(build/version -V)"
        else
          echo "❌ version utility installation failed"
          exit 1
        fi
      fi

  - name: install-pre-push
    run: |
      require_install=1
      if [ -f "build/pre-push" ]; then
        VERSION_UTIL_VERSION=$(build/pre-push -V 2>/dev/null || echo "unknown")
        VERSION_GO_LATEST=$(curl -s "https://api.github.com/repos/AlexBurnes/pre-push/releases/latest" | grep '"tag_name":' | sed 's/.*"tag_name": "\(.*\)".*/\1/' | sed 's/^v//' || echo "")
        if [ "${VERSION_UTIL_VERSION}" = "${VERSION_GO_LATEST}" ]; then
          echo "✅ pre-push utility already installed latest version: $(build/pre-push -V)"
          require_install=0
        fi
      fi
      if [ $require_install -eq 1 ]; then
        echo "Installing latest pre-push ..."
        echo "Installing pre-push to build/ directory..."
        echo "Platform: ${{ platform }}, Architecture: ${{ arch }}"
        # Use the correct install script URL format from README with pre-push variables
        wget -O - "https://github.com/AlexBurnes/pre-push/releases/latest/download/pre-push-${{ platform }}-${{ arch }}-install.sh" | INSTALL_DIR=./build sh
        # Verify installation
        if [ -f "build/pre-push" ] && build/pre-push -V >/dev/null 2>&1; then
          echo "✅ pre-push installed successfully: $(build/pre-push -V)"
          echo "Note: pre-push functionality is available via 'pre-push run pre-push'"
        else
          echo "⚠️ pre-push installation failed"
          # Don't exit with error as this is optional
        fi
      fi

  - name: update-buildfab
    run: |
      echo "Installing latest buildfab ..."

      echo "Installing buildfab"
      echo "Platform: ${{ platform }}, Architecture: ${{ arch }}"

      # Use the correct install script URL format from README with buildfab variables
      wget -O - "https://github.com/AlexBurnes/buildfab/releases/latest/download/buildfab-${{ platform }}-${{ arch }}-install.sh" | sudo sh

      # Verify installation
      if [ -f "$(which buildfab)" ] && buildfab -V >/dev/null 2>&1; then
        echo "✅ buildfab installed successfully: $(buildfab -V)"
        echo "Note: buildfab functionality is available via 'buildfab run buildfab'"
      else
        echo "⚠️ buildfab installation failed"
        # Don't exit with error as this is optional
      fi

  - name: update-pre-push
    run: |
      echo "Installing latest pre-push ..."

      echo "Installing pre-push"
      echo "Platform: ${{ platform }}, Architecture: ${{ arch }}"

      # Use the correct install script URL format from README with buildfab variables
      wget -O - "https://github.com/AlexBurnes/pre-push/releases/latest/download/pre-push-${{ platform }}-${{ arch }}-install.sh" | sudo sh

      # Verify installation
      if [ -f "$(which pre-push)" ] && pre-push -V >/dev/null 2>&1; then
        echo "✅ pre-push installed successfully: $(pre-push -V)"
        echo "Note: pre-push functionality is available via 'buildfab run pre-push'"
      else
        echo "⚠️ pre-push installation failed"
        # Don't exit with error as this is optional
      fi

  - name: repo-size
    run: |
      curl -s https://api.github.com/repos/AlexBurnes/practice-sort_keys | jq '.size * 1024' | numfmt --to=iec --suffix=B

  - name: release-size
    run: |
      curl -s https://api.github.com/repos/AlexBurnes/practice-sort_keys | jq '[.[] | .assets[]?.size] | add' | numfmt --to=iec --suffix=B

  - name: yaml-project-lint
    run: |
      if [ -e $(which yamllint) ]; then
        yamllint --no-warnings .project.yml
      else
        echo "⚠️ for validate project yml require install yamllint utility"
      fi

  - name: cppcheck-install
    shell: bash
    run: |
      version="2.16.0"
      install_prefix="/usr/local"
      if [ -e ${install_prefix}/bin/cppcheck ]; then
       installed_version=$(${install_prefix}/bin/cppcheck --version)
       if [[ ! -z "${installed_version}" && "${installed_version}" =~ "${version}" ]]; then
         echo "✅ cppcheck ${version} already installed into ${install_prefix}/bin"
         exit 0
       fi
      fi
      [ -d /tmp/cppcheck-${version} ] && rm -fr /tmp/cppcheck-${version}
      [ -f /tmp/cppcheck-${version}.zip ] && rm -f /tmp/cppcheck-${version}.zip
      echo "🌐 download cppcheck-${version}.zip"
      wget -O "/tmp/cppcheck-${version}.zip" https://github.com/danmar/cppcheck/archive/${version}.zip
      echo "📦 unpack cppcheck-${version}.zip"
      unzip -qq /tmp/cppcheck-${version}.zip -d /tmp
      rm -f /tmp/cppcheck-${version}.zip
      cd /tmp/cppcheck-${version}
      echo "🏗️ build cppcheck"
      cmake -H. -Bbuild -DCMAKE_INSTALL_PREFIX=${install_prefix}
      cmake --build build
      cmake --install build
      rm -fr /tmp/cppcheck-${version}
      if [ ! -e "${install_prefix}/bin/cppcheck" ]; then
        echo "⚠️ fail install cppcheck ${version}"
        exit 1
      fi
      installed_version=$(${install_prefix}/bin/cppcheck --version)
      if [[ -z "${installed_version}" || ! "${installed_version}" =~ "${version}" ]]; then
        echo "⚠️ fail install cppcheck ${version}, ${install_prefix}/bin/cppcheck --version returns another version ${installed_version}"
        exit 1
      fi
      echo "✅ cppcheck ${version} installed into ${install_prefix}/bin"

  - name: check-pvs-studio
    run: |
      if ! which pvs-studio >/dev/null 2>&1; then
        echo "pvs-studio is not installed."
        exit 1
      fi
      pvs-studio --version

  - name: install-pvs-studio
    variants:
    - when: ${{ platform == 'linux' && (os == "ubuntu" || os == "debian") }}
      run: |
       if ! which pvs -studio >/dev/null 2>&1; then
         echo "pvs-studio is not installed."
         wget -q -O - https://wcdn.pvs-studio.com/etc/pubkey.txt | apt-key add -
         wget -O /etc/apt/sources.list.d/viva64.list https://wcdn.pvs-studio.com/etc/viva64.list
         apt-get update
         apt-get install pvs-studio
         if ! which pws-studio >/dev/null 2>&1; then
             echo "failed install pvs-studio"
             exit 1
         fi
         exit 0
       fi
       echo "pvs-studio is already installed."
       pvs-studio --version
