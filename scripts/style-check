#!/usr/bin/env bash


set -o nounset

STYLE_FILE="file:style_format.txt"
dirs=("$@")

if [[ ${#dirs[@]} -eq 0 ]]; then
    dirs=(src)
fi

clang-format --version

function clang_format() {
    #echo "verifying 'clang-format --output-replacements-xml --style=\"${STYLE_FILE}\" $@'"
    if clang-format --output-replacements-xml --style="${STYLE_FILE}" "$@" | grep -q '<replacement '; then
        echo -e "$@ not in code style format"
        echo -e "To fix formatting run:"
        echo -e "    clang-format -i --style=\"${STYLE_FILE}\" $@"
        clang-format --output-replacements-xml --style="${STYLE_FILE}" "$@"
        return 1
    fi
    echo -e "$@ code style ok"
    return 0
}

function clang_fix() {
    echo -e "fix 'clang-format -i --style=\"${STYLE_FILE}\" $@'"
    clang-format -i --style="${STYLE_FILE}" "$@"
}

tmpfile="tmpfile.$RANDOM"
echo -e "Style check format \"${STYLE_FILE}\""

for dir in ${dirs[@]}; do
    echo -e "check style at ${dir}"
    find ${dir} -iname "*.cpp" -o -iname "*.hpp" >> "$tmpfile"
done
ec=0
while read -r file; do
    clang_format "$file"
    rc=$?
    if [[ $rc -eq 1 ]]; then
        ec=1
    fi
done < "$tmpfile"
rm -f "$tmpfile"

if [[ ${ec} -eq 0 ]]; then
    echo -e "style check ok"
else 
    echo -e "style check error"
fi
exit "$ec"
