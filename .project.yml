---
project:
  name: "SortKeys"
  modules: ['test_sort_keys', 'test_bench']
  bin: "bin"

include:
  - "build/update-checking-stages.yml"
  - "build/update-checking-actions.yml"

stages:

  # validate project on git push
  pre-push:
    steps:
      - action: version-check
      - action: version-greatest
      - action: run-test
      - action: git-untracked
      - action: git-uncommitted
      - action: git-modified

  build:
    steps:
      - action: pre-check
      - action: conan-install
        require: [pre-check]
      - action: cmake-config
        require: [conan-install]
      - action: cmake-build
        require: [cmake-config]
      - action: cmake-install
        require: [cmake-build]
      - action: run-test
        require: [cmake-build]
      - action: coverage-test
        require: [run-test]
      - action: benchmark
        require: [coverage-test]

  check:
    steps:
      - action: check-valgrind
      - action: check-cppcheck
      - action: check-clang-format
      - action: style-check
        require: [check-clang-format]
      - action: cpp-check
        require: [check-cppcheck]
      - action: mem-check
        require: [check-valgrind]

  make:
    steps:
      - action: cmake-build
      - action: run-test
        require: [cmake-build]

  test:
    steps:
      - action: run-test
      - action: coverage-test
      - action: benchmark

  install:
    steps:
      - action: cmake-install

  images-build:
    steps:
      - action: container-build
        matrix:
          values:
            image:
              - "centos:7"
              - "centos:8"
              - "debian:12.7"
          strategy:
            max_parallel: 2
            fail_fast: true
            continue_on_error: false
            order: "fifo"

actions:

  - name: run-test
    run: |
      ctest --test-dir .build -T Test -V

  - name: coverage-test
    run: |
      ctest --test-dir .build -T Coverage

  - name: benchmark
    run: |
      bin/test_bench --benchmark_counters_tabular=true

  - name: conan-install
    run: |
      conan install . -of .build --build-type ${{version.build-type}} --build=missing --profile=default

  - name: cmake-config
    run: |
      conan_preset="conan-$(echo ${{version.build-type}} | tr '[:upper:]' '[:lower:]')"
      cmake --preset ${conan-preset}

  - name: cmake-build
    run: |
      conan_preset="conan-$(echo ${{version.build-type}} | tr '[:upper:]' '[:lower:]')"
      cmake --build --preset ${conan-preset}

  - name: cmake-install
    run: |
      conan_preset="conan-$(echo ${{version.build-type}} | tr '[:upper:]' '[:lower:]')"
      cmake --build --preset ${conan-preset} --target install

  - name: container-build
    container:
      engine: docker
      image:
        from: ${{ matrix.image }}
      workdir: /src
      cache:
        conan: ./.cache
      env:
        BRANCH: ${{version.branch}}
      cpu: 2
      memory: 4G
      network: host
      env_file: .docker-env
      run_stage: build

  - name: docker-build
    run: |
      sudo docker build --tag practice_sort_keys:latest --network host --progress=plain .

  - name: docker-start
    run: |
      sudo docker run -d --rm --name practice_sort_keys --publish 8081:80 practice_sort_key

  - name: docker-stop
    run: |
      sudo docker stop practice_sort_keys

  - name: mem-check
    run: |
      valgrind --tool=memcheck --leak-check=full --track-origins=yes bin/${{version.module}}

  - name: cpp-check
    shell: bash
    run: |
      # Source directory to check:
      dirs=(src)
      # cppcheck command and arguments
      cppcheck="/usr/local/bin/cppcheck --enable=all --inconclusive --error-exitcode=1 --check-level=exhaustive \
        -I src/include --include=.cppcheck.include \
        --suppressions-list=.cppcheck.suppress \
        --force --checkers-report=/tmp/cppcheck_report.txt"
      # do cppcheck
      . build/colors.sh
      source_dirs=$(find ${dirs[@]} -type d)
      rc=0
      for dir in ${source_dirs}; do
        sources=$(find ${dir} -maxdepth 1 -name *.c* | wc | awk '{print $1}')
        if [[ ${sources} -gt 1 ]]; then
          ${cppcheck} ${dir}
        fi
      done
      if [[ ${rc} -gt 0 ]]; then
        echo -e "❌ ${red}cppcheck found errors, fix the code${clre}"
        echo -e "review cppcheck report ${bold}/tmp/cppcheck_report.txt${clre}"
        exit 1
      fi
      rm -f /tmp/cppcheck_report.txt
      echo -e "✅cppcheck ${green}ok${clre}"

  - name: style-check
    shell: bash
    run: |
      # Source directory to scan:
      dirs=(src)
      # Clang format command and arguments
      clang_format="clang-format --output-replacements-xml --style=file:.clang-format.style"
      # Do code style checking
      . build/colors.sh
      if [[ -f ".styleignore" ]]; then
        source_dirs="$(find ${dirs[@]} -type d)"
        dirs=()
        for dir in $(echo ${source_dirs}); do
          ignore_dir=$(cat .styleignore | grep -e "^${dir}\$" | wc | awk '{print $1}')
          if [[ ${ignore_dir} -eq 0 ]]; then
            dirs+=("${dir}")
          fi
        done
      fi
      tmpfile="/tmp/tmpfile.$RANDOM"
      for dir in ${dirs[@]}; do
        find "${dir}" -maxdepth 1 -iname "*.cpp" -o -iname "*.hpp" >> "$tmpfile"
        find "${dir}" -maxdepth 1 -iname "*.c" -o -iname "*.h" >> "$tmpfile"
      done
      ec=0
      while read -r file; do
        if ${clang_format} "$file" | grep -q '<replacement '; then
           echo -e "$file${red} is not in defined format of code style${clre}"
           echo -e "To fix formatting run: ${bold}$ ${clang_format} -i '$file'${clre}"
           ec=1
        fi
      done < "$tmpfile"
      rm -f "$tmpfile"
      if [[ ${ec} -eq 0 ]]; then
        echo -e "✅ code style check ${green}ok${clre}"
        exit 0
      fi
      echo "❌ code style check ${red}error${clre}"
      exit 1

