---
project:
  name: "SortKeys"
  modules: ['test_sort_keys', 'test_bench']
  bin: "bin"

include:
  - "build/update-checking-stages.yml"
  - "build/update-checking-actions.yml"

stages:

  # validate project on git push
  pre-push:
    steps:
      - action: version-check
      - action: version-greatest
      - action: run-test
      - action: git-untracked
      - action: git-uncommitted
      - action: git-modified

  images-build:
    steps:
      - action: container-build
        matrix:
          values:
            image:
              - "centos:7"
              - "centos:8"
              - "debian:12.7"
          strategy:
            max_parallel: 2     # <- run at most N matrix jobs at once (default: all)
            fail_fast: true     # <- stop scheduling new jobs when any job fails (default: false)
            continue_on_error: false  # <- if true, stage succeeds even if some jobs fail
            # (optional) ordering policy; if omitted, natural order is used
            order: "fifo"       # "fifo" | "random"

  build:
    steps:
      - action: pre-check
      - action: conan-install
        require: [pre-check]
      - action: cmake-config
        require: [conan-install]
      - action: cmake-build
        require: [cmake-config]
      - action: cmake-install
        require: [cmake-build]
      - action: run-test
        require: [cmake-build]
      - action: coverage-test
        require: [run-test]
      - action: benchmark
        require: [coverage-test]

  make:
    steps:
      - action: cmake-build
      - action: run-test
        require: [cmake-build]

  test:
    steps:
      - action: run-test
      - action: coverage-test
      - action: benchmark

  install:
    steps:
      - action: cmake-install

actions:

  - name: run-test
    run: ctest --test-dir .build -T Test -V

  - name: coverage-test
    run: ctest --test-dir .build -T Coverage

  - name: benchmark
    run: bin/test_bench --benchmark_counters_tabular=true

  # Dependency installation actions
  - name: conan-install
    run: |
      # Check for golang package in Conan
      if ! conan search golang --remote=all 2>/dev/null | grep -q "golang/"; then
        echo "Creating golang package locally..."
        conan create conanfile-golang.py --build=missing
      fi
      conan install . --build=missing --profile=default

  # Build actions
  - name: cmake-config
    run: |
      # Configure CMake with Conan preset
      mkdir -p .build
      # Try to use Conan preset first (CMake 3.23+)
      if cmake --version | grep -q "3\.2[3-9]\|3\.[3-9]\|[4-9]\." && [ -f "./CMakeUserPresets.json" ]; then
        echo "Using Conan CMake preset"
        cmake --preset conan-release
      else
        echo "Using manual CMake configuration"
        cmake -B .build -DCMAKE_BUILD_TYPE=Release -DCMAKE_INSTALL_PREFIX="/usr/local" -G "Unix Makefiles"
      fi

  - name: cmake-build
    run: |
      # Build for current platform
      if cmake --version | grep -q "3\.2[3-9]\|3\.[3-9]\|[4-9]\." && [ -f "./CMakeUserPresets.json" ]; then
        echo "Building with CMake preset"
        cmake --build --preset conan-release --target buildfab
      else
        echo "Building with manual configuration"
        cmake --build .build --target buildfab
      fi

  - name: cmake-install
    run: |
      # Install binary to project bin directory using CMake
      if cmake --version | grep -q "3\.2[3-9]\|3\.[3-9]\|[4-9]\." && [ -f "./CMakeUserPresets.json" ]; then
        echo "Installing with CMake preset"
        cmake --build --preset conan-release --target install
      else
        echo "Installing with manual configuration"
        cmake --build .build --target install
      fi

  - name: container-build
    container:
      engine: docker
      image:
        from: ${{ matrix.image }}
      workdir: /src
      cache:
        conan: ./.cache
      env:
        BRANCH: ${{version.branch}}
      cpu: 2
      memory: 4G
      network: host
      env_file: .docker-env
      run_stage: build

  - name: docker-build
    run: |
      sudo docker build --tag practice_sort_keys:latest --network host --progress=plain .

  - name: docker-start
    run: |
      sudo docker run -d --rm --name practice_sort_keys --publish 8081:80 practice_sort_key

  - name: docker-stop
    run: |
      sudo docker stop practice_sort_keys

  - name: mem-check
    run: |
      valgrind --tool=memcheck --leak-check=full --track-origins=yes bin/test_sort_keys

  - name: cpp-check
    run: |
      /usr/local/bin/cppcheck --enable=all --inconclusive --error-exitcode=1 --check-level=exhaustive \
        --force --checkers-report=cppcheck_report.txt"
      CPPCHECK_INCLUDE_FILE_DEFAULT=".cppcheck.include"
      CPPCHECK_SUPPRESS_FILE_DEFAULT=".cppcheck.suppress"
